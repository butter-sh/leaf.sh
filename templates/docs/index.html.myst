<!DOCTYPE html>
<html lang="en" class="scroll-smooth dark">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{project_name}} - Documentation</title>
  <meta name="description" content="{{project_description}}">

  {{> _head}}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/bash.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
</head>
<body class="carbon-bg min-h-screen text-slate-100">
    {{> _header}}

    <!-- Hero Section -->
    <section class="py-20 px-4">
        <div class="max-w-7xl mx-auto text-center">
            {{> _hero_icon}}
            <h1 class="text-6xl font-bold mb-6 animate-fade-in" style="color: var(--carbon-light);">
                {{project_name}}
            </h1>
            <p class="text-2xl text-slate-300 mb-8 max-w-3xl mx-auto animate-fade-in">
                {{project_description}}
            </p>
            <span class="px-3 py-1 text-sm font-semibold rounded-full animate-fade-in inline-block" 
                  style="background: rgba(134, 239, 172, 0.2); color: var(--carbon-light);">
                v{{project_version}}
            </span>
        </div>
    </section>

    <!-- Overview Section -->
    <section id="overview" class="py-16 px-4">
        <div class="max-w-7xl mx-auto">
            <div class="max-w-2xl mx-auto">
                <div class="card-project p-8 md:p-12 rounded-2xl">
                    <h2 class="text-4xl font-bold mb-8" style="color: var(--carbon-light);">Overview</h2>
                    <div id="readmeContent" class="prose" style="color: var(--carbon-surface-foreground)">
                        <p class="text-slate-400">Loading README...</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Source Files Section -->
    <section id="source" class="py-16 px-4">
        <div class="max-w-7xl mx-auto">
            <h2 class="text-2xl font-bold mb-12 text-center" style="color: var(--carbon-light);">
                Source Files
            </h2>
            <div class="max-w-2xl mx-auto">
                <div id="sourceFiles" class="grid gap-6">
                    <p class="text-slate-400 text-center">Loading source files...</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Examples Section -->
{{#if has_examples}}
    <section id="examples" class="py-16 px-4">
        <div class="max-w-7xl mx-auto">
            <h2 class="text-4xl font-bold mb-12 text-center" style="color: var(--carbon-light);">
                Examples
            </h2>
            <div class="grid gap-6">{{{examples_html}}}</div>
        </div>
    </section>
{{/if}}

    {{> _footer}}

    {{> _scroll_to_top}}

    <script>
        // List of source files to load
        const sourceFiles = {{{source_files_json}}};

        // Load and render README
        fetch('README.md')
            .then(response => response.text())
            .then(markdown => {
                marked.setOptions({
                    highlight: (code, lang) => {
                        if (lang && hljs.getLanguage(lang)) {
                            return hljs.highlight(code, { language: lang }).value;
                        }
                        return hljs.highlightAuto(code).value;
                    }
                });
                document.getElementById('readmeContent').innerHTML = marked.parse(markdown);
                hljs.highlightAll();
            })
            .catch(err => {
                document.getElementById('readmeContent').innerHTML =
                    '<p class="text-red-400">Failed to load README.md</p>';
                console.error('Failed to load README:', err);
            });

        // Load and render source files
        const sourceFilesContainer = document.getElementById('sourceFiles');
        sourceFilesContainer.innerHTML = '';

        sourceFiles.forEach(file => {
            const fileDiv = document.createElement('div');
            fileDiv.className = 'source-file card-project rounded-xl overflow-hidden';

            const header = document.createElement('div');
            header.className = 'source-file-header p-4 flex items-center justify-between cursor-pointer';
            header.innerHTML = `
                <div class="flex items-center space-x-3">
                    <svg class="w-5 h-5" style="color: var(--carbon-light);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"/>
                    </svg>
                    <span class="font-semibold" style="color: var(--carbon-light);">${file}</span>
                </div>
                <svg class="chevron w-5 h-5" style="color: var(--carbon-light);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                </svg>
            `;

            const content = document.createElement('div');
            content.className = 'source-file-content';
            content.innerHTML = '<pre class="m-0 p-4"><code class="language-bash">Loading...</code></pre>';

            fileDiv.appendChild(header);
            fileDiv.appendChild(content);
            sourceFilesContainer.appendChild(fileDiv);

            // Load source file via AJAX
            fetch(`source/${file}`)
                .then(response => response.text())
                .then(code => {
                    const highlighted = hljs.highlight(code, { language: 'bash' }).value;
                    content.innerHTML = `<pre class="m-0 p-4"><code class="language-bash">${highlighted}</code></pre>`;
                })
                .catch(err => {
                    content.innerHTML = '<pre class="m-0"><code class="text-red-400">Failed to load source file</code></pre>';
                    console.error(`Failed to load ${file}:`, err);
                });

            // Toggle expand/collapse
            header.addEventListener('click', () => {
                fileDiv.classList.toggle('expanded');
            });
        });
    </script>
</body>
</html>
